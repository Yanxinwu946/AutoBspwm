{
  "$schema": "https://github.com/fastfetch-cli/fastfetch/raw/dev/doc/json_schema.json",

  // ───────── Logo con imagen (ajusta ruta/tamaño si quieres) ─────────
  "logo": {
    "type": "auto",                        // o "kitty-direct", "sixel", "iterm", "chafa"
    "source": "~/.config/fastfetch/kuromi/*.png",
    "width": 42,
    "height": 18,
    "padding": { "top": 1, "left": 2, "right": 4 },
    "position": "left"
  },

  // ───────── Estilo global ─────────
  "display": {
    "separator": " ",
    "key": { "width": 16 },
    "color": {
      "keys": "magenta",
      "title": "cyan",
      "output": "light_white",
      "separator": "light_magenta"
    }
  },

  "modules": [
    // Identidad
    { "type": "title", "key": "╭─(★ω★)ﾉ", "keyColor": "magenta", "format": " {user-name}{#bold_white}@{host-name}{#}" },

    // ╔══════════════════ SO ══════════════════╗
    { "type": "custom", "format": "{#cyan}╭─[  SO  ]────────────────────────────────────────────{#}" },
    { "type": "os",          "key": "│ 🖥️ OS",      "keyColor": "cyan" },
    { "type": "kernel",      "key": "│ ⚙️ Kernel",  "keyColor": "cyan" },
    { "type": "packages",    "key": "│ 📦 Paqs",    "keyColor": "cyan" },
    { "type": "shell",       "key": "│ 💻 Shell",   "keyColor": "cyan" },
    { "type": "uptime",      "key": "│ ⏳ Uptime",  "keyColor": "cyan" },
    { "type": "custom", "format": "{#cyan}╰──────────────────────────────────────────────────────{#}" },

    "break",

    // ╔════════════════ Hardware ════════════════╗
    { "type": "custom", "format": "{#magenta}╭─[  Hardware  ]──────────────────────────────────────{#}" },
    { "type": "cpu",        "key": "│ 🔥 CPU",     "keyColor": "yellow", "format": " {name} @ {freq-max}" },
    { "type": "gpu",        "key": "│ ✨ GPU",     "keyColor": "yellow" },
    { "type": "memory",     "key": "│ 🧠 RAM",     "keyColor": "yellow" },
    { "type": "disk",       "key": "│ 💾 Disco",   "keyColor": "yellow" },
    { "type": "custom", "format": "{#magenta}╰──────────────────────────────────────────────────────{#}" },

    "break",

    // ╔══════════ Red & Seguridad (Ethical Hacking) ══════════╗
    { "type": "custom", "format": "{#blue}╭─[  Red & Seguridad  ]────────────────────────────────{#}" },

    { "type": "wifi",       "key": "│ 📶 Wi-Fi",       "keyColor": "blue",  "format": " {ssid}" },

    { "type": "localip",    "key": "│ 🔌 IP local",   "keyColor": "blue",  "compact": true },

    { "type": "command",    "key": "│ 🧭 Gateway",    "keyColor": "blue",
      "text": "gw=\"$(ip route 2>/dev/null | awk '/default/ {print $3\" (\"$5\")\"; exit}')\"; [ -n \"$gw\" ] && echo \"$gw\" || echo 'n/a'" },

    {"type": "publicip",   "key": "│ 🌍 IP pública",  "keyColor": "blue",  "timeout": 1200 },
    
    { "type": "command",    "key": "│ 🚪 Puertos (escucha)", "keyColor": "blue",
      "text": "ss -tulnH 2>/dev/null | wc -l || echo 0" },

    { "type": "command",    "key": "│ 🎯 Top puertos", "keyColor": "blue",
      "text": "out=\"$(ss -tulnH 2>/dev/null | awk '{print $5}' | sed 's/.*://' | sort -n | uniq -c | sort -nr | head -5)\"; [ -n \"$out\" ] && printf '%s\\n' \"$out\" || echo 'n/a'" },

    { "type": "command",    "key": "│ 🔁 IP forward", "keyColor": "blue",
      "text": "val=\"$(sysctl -n net.ipv4.ip_forward 2>/dev/null || cat /proc/sys/net/ipv4/ip_forward 2>/dev/null)\"; [ \"$val\" = \"1\" ] && echo 'ON' || echo 'OFF'" },

    { "type": "custom", "format": "{#blue}╰──────────────────────────────────────────────────────{#}" },

    "break",

    // ╔════════ Contenedores & Virtualización ═════════╗
    { "type": "custom", "format": "{#yellow}╭─[  Contenedores & Virt  ]────────────────────────────{#}" },
    { "type": "command", "key": "│ 🐳 Docker cont.", "keyColor": "yellow",
      "text": "if command -v docker >/dev/null 2>&1; then docker ps -q 2>/dev/null | wc -l; else echo '0 (no docker)'; fi" },
    { "type": "command", "key": "│ 🍱 Podman cont.", "keyColor": "yellow",
      "text": "if command -v podman >/dev/null 2>&1; then podman ps -q 2>/dev/null | wc -l; else echo '0 (no podman)'; fi" },
    { "type": "command", "key": "│ 🖥️ Virt",          "keyColor": "yellow",
      "text": "systemd-detect-virt 2>/dev/null || echo none" },
    { "type": "command", "key": "│ 🧬 HW virt flags", "keyColor": "yellow",
      "text": "flags=\"$(grep -Eo 'vmx|svm' /proc/cpuinfo 2>/dev/null | sort -u | paste -sd, -)\"; [ -n \"$flags\" ] && echo \"$flags\" || echo 'n/a'" },
    { "type": "custom", "format": "{#yellow}╰──────────────────────────────────────────────────────{#}" },

    "break",

    // ╔════════ Toolbelt de pentest (organizado) ════════╗
    { "type": "custom", "format": "{#red}╭─[  Toolbelt  ]───────────────────────────────────────{#}" },

    // Recon
    { "type": "command", "key": "│ 🛰️ Recon", "keyColor": "red",
      "text": "found=''; for t in nmap masscan amass; do command -v \"$t\" >/dev/null 2>&1 && found=\"$found $t\"; done; if [ -n \"$found\" ]; then set -- $found; echo \"($#) $found\"; else echo 'ninguna'; fi" },

    // Fuzzing / Enumeración
    { "type": "command", "key": "│ 🎯 Fuzzing/Enum", "keyColor": "red",
      "text": "found=''; for t in ffuf gobuster feroxbuster wfuzz dirsearch; do command -v \"$t\" >/dev/null 2>&1 && found=\"$found $t\"; done; if [ -n \"$found\" ]; then set -- $found; echo \"($#) $found\"; else echo 'ninguna'; fi" },

    // Vulns Web / Detección
    { "type": "command", "key": "│ 🧪 Web vulns", "keyColor": "red",
      "text": "found=''; for t in sqlmap nuclei; do command -v \"$t\" >/dev/null 2>&1 && found=\"$found $t\"; done; if [ -n \"$found\" ]; then set -- $found; echo \"($#) $found\"; else echo 'ninguna'; fi" },

    // Credenciales / Cracking
    { "type": "command", "key": "│ 🔑 Credenciales", "keyColor": "red",
      "text": "found=''; for t in hydra john hashcat; do command -v \"$t\" >/dev/null 2>&1 && found=\"$found $t\"; done; if [ -n \"$found\" ]; then set -- $found; echo \"($#) $found\"; else echo 'ninguna'; fi" },

    // SMB / AD / Movimiento lateral
    { "type": "command", "key": "│ 🧰 SMB/AD", "keyColor": "red",
      "text": "found=''; for t in impacket-smbclient smbclient crackmapexec responder; do command -v \"$t\" >/dev/null 2>&1 && found=\"$found $t\"; done; if [ -n \"$found\" ]; then set -- $found; echo \"($#) $found\"; else echo 'ninguna'; fi" },

    { "type": "custom", "format": "{#red}╰──────────────────────────────────────────────────────{#}" }
  ]
}
